A) Welche Vorteile bieten Coroutinen in der Android-Entwicklung und wie tragen sie dazu bei, asynchrone
Aufgaben effizienter und benutzerfreundlicher zu gestalten?

Coroutinen machen die Entwicklung in Android effizienter und benutzerfreundlicher, weil sie wie
normaler Code geschrieben werden können, obwohl sie asynchron arbeiten. Dies reduziert die
Komplexität erheblich. Ein großer Vorteil ist, dass sie leichtgewichtig sind und keine Threads
blockieren, wodurch die Ressourcen der App geschont werden. Außerdem integrieren sie sich gut in
Android-Komponenten wie ViewModel oder Lifecycle, was hilft, typische Probleme mit Nebenläufigkeit,
wie Speicherlecks oder unkontrollierte Prozesse zu vermeiden. Besonders bei Aufgaben wie API-Aufrufen
oder Datenbankoperationen sind sie viel angenehmer zu benutzen als Ansätze wie AsyncTasks oder Threads.



B) Erkläre warum du dich für einen bestimmten Dispatcher in Aufgabe 2A) entschieden hast.

Ich habe mich für Dispatchers.IO entschieden, da dieser Dispatcher speziell für E/A-intensive
Aufgaben wie Netzwerkoperationen geeignet ist. In Aufgabe 2A rufen wir die Wettervorhersagedaten
von einer API ab, und solche Operationen sollten nicht auf dem Haupt-Thread laufen, um die
Benutzeroberfläche nicht zu blockieren. Dispatchers.IO sorgt dafür, dass die Anfrage in einem
Hintergrund-Thread ausgeführt wird, der für solche Arbeiten optimiert ist. Das ist wichtig, um die
App flüssig und reaktionsfähig zu halten.



C) Nenne zwei praxisrelevante Anwendungsfälle, bei denen der Einsatz von Services sinnvoll ist.
Erkläre kurz warum.

    1. Daten-Synchronisation: Ein Hintergrund-Service kann regelmäßig Daten wie Kontakte, Nachrichten
oder Dateien mit einem Server synchronisieren. Das ist besonders nützlich, wenn die App nicht aktiv
ist, der Nutzer aber trotzdem aktuelle Daten benötigt. Hier macht ein Background-Service in
Kombination mit dem WorkManager Sinn, um diese Aufgaben effizient zu erledigen.

    2. Navigationsdienste: Eine Karten-App, die den Standort des Nutzers in Echtzeit verfolgt, verwendet
oft einen Foreground-Service. Dadurch bleibt die Navigation auch dann aktiv, wenn die App im
Hintergrund läuft. Der Foreground-Service stellt sicher, dass der Nutzer durch eine Benachrichtigung
Zugriff auf die Navigation hat und diese nicht abrupt beendet wird.



D) Welche Vorteile bietet die Kombination von Services und Coroutinen? Kannst du ein Beispiel aus
dem Code der Wetter-App nennen, in dem beide miteinander kombiniert genutzt werden?

Die Kombination von Services und Coroutinen bietet viele Vorteile, vor allem Effizienz und
Stabilität. Services sorgen dafür, dass Aufgaben unabhängig vom Zustand der App laufen, während
Coroutinen asynchrone Aufgaben wie Datenabrufe oder Timer-Verwaltung ressourcenschonend umsetzen.
Das verbessert die Leistung der App und vermeidet Probleme wie UI-Blockaden.

Ein Beispiel aus der Wetter-App ist der PopupService. Hier wird ein Foreground-Service genutzt,
um Benachrichtigungen zu senden. Gleichzeitig werden Coroutinen eingesetzt, um die Timer-Einstellungen
aus dem DataStore asynchron zu laden (initializeTimerFromSettings). Diese Kombination macht den
Service effizient und verhindert, dass die App während der Datenverarbeitung hängen bleibt.